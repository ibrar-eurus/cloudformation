Description: >
    This template deploys an ibrar ECS cluster to the provided VPC and subnets using an Auto Scaling Group
Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    InstanceType: 
        Description: Which instance type should we use to build the ECS cluster?
        Type: String
        Default: t2.micro

    ClusterSize:
        Description: How many ECS hosts do you want to initially deploy?
        Type: Number
        Default: 4

    VPC:
        Description: Choose which VPC this ECS cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this ECS cluster should be deployed to
        Type: CommaDelimitedList
        
        

    SecurityGroup:
        Description: Select the Security Group to use for the ECS cluster hosts
        Type: AWS::EC2::SecurityGroup::Id
        
    KeyPair: 
        Description: 'Name of an existing EC2 KeyPair to enable SSH access to the ECS instances'
        Type: AWS::EC2::KeyPair::KeyName
        
    AMId:
        Description: The AMI Fetched From Infrastructure
        Type: String
Resources:

    ECSCluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Sub ibrar_${EnvironmentName}_ECS

###########################################################################################################
    AutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        AutoScalingGroupName: !Sub ibrar ${EnvironmentName}
        Cooldown: 120
        DesiredCapacity: !Ref ClusterSize
          
        LaunchConfigurationName: !Ref LaunchConfig
        MaxSize:
          5
        MinSize: !Ref ClusterSize
        Tags:
          -
            Key: Name
            Value: !Sub ibrar ${EnvironmentName}   ECS host
            PropagateAtLaunch: 'true'
        VPCZoneIdentifier: !Ref Subnets


    LaunchConfig: 
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties: 
       
        ImageId: !Ref AMId
        SecurityGroups:
          -  !Ref SecurityGroup
        
        KeyName: !Ref KeyPair
        IamInstanceProfile: !Ref ECSInstanceProfile
        UserData: 
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          
        InstanceType: !Ref InstanceType

##############################################################################################################
      
    ECSRole: 
        Type: AWS::IAM::Role 
        Properties:  
            Path: / 
            RoleName: !Sub ${EnvironmentName}-ECSRole-${AWS::Region} 
            AssumeRolePolicyDocument: | 
                {
                    "Statement": [{ 
                        "Action": "sts:AssumeRole", 
                        "Effect": "Allow", 
                        "Principal": {  
                            "Service": "ec2.amazonaws.com"  
                        }
                    }]
                }
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/AmazonSSMFullAccess
                - arn:aws:iam::aws:policy/service-role/AmazonSSMMaintenanceWindowRole
            Policies:  
                - PolicyName: ecs-service 
                  PolicyDocument: |
                    {
                        "Statement": [{ 
                            "Effect": "Allow", 
                            "Action": [ 
                                "ecs:CreateCluster", 
                                "ecs:DeregisterContainerInstance", 
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll", 
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:Submit*",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:BatchGetImage",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:GetAuthorizationToken",
                                "s3:*",                             
                                "ec2:DescribeInstances",
                                "logs:CreateLogGroup",
                                "logs:DescribeLogGroups",
                                "logs:DescribeLogStreams",
                                "cloudwatch:PutMetricData",
                                "cloudwatch:GetMetricStatistics",
                                "cloudwatch:ListMetrics",
                                "ec2:DescribeTags"
                            ],
                            "Resource": "*" 
                        }]
                    }
    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole



    sgwithoutegress:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Limits security group egress traffic
            SecurityGroupEgress:
            - CidrIp: 10.0.21.0/24
              IpProtocol: "-1"
            VpcId: !Ref VPC

    sgwithoutegresss:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Limits security group egress traffic
            SecurityGroupEgress:
            - CidrIp: 10.0.22.0/24
              IpProtocol: "-1"
            VpcId: !Ref VPC
      


                
   
Outputs:

    Cluster:
        Description: A reference to the ECS cluster
        Value: !Ref ECSCluster